// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BUYER
  SELLER
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String
  role      Role      @default(BUYER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  store     Store?
  cartItems CartItem[]
  orders    Order[]
  reviews Review[]
}

model Store {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
  orders   Order[] // <-- TAMBAHKAN RELASI BALASAN KE ORDER
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  storeId    String
  store      Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews Review[]
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_STORE_CONFIRMATION
  PROCESSING
  SHIPPED
  ARRIVED
  WAITING_FOR_REVIEW
  COMPLETED
  CANCELLED
}

model Order {
  id              String      @id @default(cuid())
  totalAmount     Float
  status          OrderStatus @default(WAITING_FOR_PAYMENT)
  shippingMethod  String
  shippingCost    Float
  shippingAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  storeId String
  store   Store  @relation(fields: [storeId], references: [id])
  
  items OrderItem[]

  @@index([userId])
  @@index([storeId])
  reviews Review?
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // Rating bintang, misal 1-5
  comment   String?
  createdAt DateTime @default(now())

  // Relasi ke User, Product, dan Order
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderId   String  @unique // Pastikan satu order hanya bisa diulas sekali
  order     Order   @relation(fields: [orderId], references: [id])

  @@index([productId])
  @@index([userId])
}